//+------------------------------------------------------------------+
//|                                                   InsideBar.mq4  |
//|                        Copyright 2024, MetaQuotes Software Corp. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property strict
#property indicator_chart_window
#property indicator_buffers 2
#property indicator_color1 clrNONE

// Input parameters
input color InsideBarColor = 0x131722; // Custom color #131722

// Indicator buffers
double ColorOpenBuffer[];
double ColorCloseBuffer[];
double ColorBuffer[];

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
  {
   // Set the indicator buffers
   SetIndexBuffer(0, ColorOpenBuffer);
   SetIndexBuffer(1, ColorCloseBuffer);
   SetIndexBuffer(2, ColorBuffer);

   // Set the indicator styles
   SetIndexStyle(0, DRAW_COLOR_SECTION);
   SetIndexStyle(1, DRAW_COLOR_SECTION);
   SetIndexLabel(0, "ColorOpen");
   SetIndexLabel(1, "ColorClose");

   IndicatorShortName("InsideBar");
   
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
  {
   int limit = rates_total - prev_calculated;
   if (prev_calculated > 0) limit++;
   
   for (int i = limit; i >= 1; i--)
     {
      int pos = rates_total - i;

      // Check if the current bar is an inside bar
      if (high[pos] < high[pos + 1] && low[pos] > low[pos + 1])
        {
         // Change the color of the inside bar candle body
         ColorOpenBuffer[pos] = open[pos];
         ColorCloseBuffer[pos] = close[pos];
         ColorBuffer[pos] = InsideBarColor;
        }
      else
        {
         ColorOpenBuffer[pos] = EMPTY_VALUE;
         ColorCloseBuffer[pos] = EMPTY_VALUE;
         ColorBuffer[pos] = clrNONE; // No color change
        }
     }
   return(rates_total);
  }
//+------------------------------------------------------------------+
